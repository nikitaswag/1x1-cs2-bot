import random
import  aiogram
from aiogram import Router,F
from keyboards.inline import inline_kb, case_o_chek, case_battle, case_r_chek, case_i_chek, case_drop
from aiogram.types import CallbackQuery
import  sqlite3
from database import select_balance,popoln
from aiogram.types import Message
from aiogram.fsm.context import FSMContext



callbacks_router = Router()

@callbacks_router.callback_query(F.data == "query")
async def get_query(callback: CallbackQuery):
    await callback.message.answer(text="------")

@callbacks_router.callback_query(F.data == "case_o")
async def get_case_o(callback: CallbackQuery):
    await callback.message.edit_text(text="<b>üîπ –û–±—ã—á–Ω—ã–π (49‚ÇΩ)</b>", reply_markup= case_o_chek)

@callbacks_router.callback_query(F.data == "back")
async def get_case_o(callback: CallbackQuery):
    await callback.message.edit_text(text="üéÅ –û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ —Å–∫–∏–Ω—ã!\n "
                         "–ö–∞–∂–¥—ã–π –∫–µ–π—Å ‚Äî —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–∏–π —Å–∫–∏–Ω CS2 –∏–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å! –ß–µ–º –¥–æ—Ä–æ–∂–µ –∫–µ–π—Å, —Ç–µ–º —Ü–µ–Ω–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥–∞.\n"
                         " üî• –û—Ç–∫—Ä—ã–≤–∞–π –∏ —Ç–µ—Å—Ç–∏—Ä—É–π —É–¥–∞—á—É!",reply_markup= case_battle)

@callbacks_router.callback_query(F.data == "case_r")
async def get_case_o(callback: CallbackQuery):
    await callback.message.edit_text(text="<b>üî∫ –†–µ–¥–∫–∏–π <s><i>(150‚ÇΩ)</i></s>(100‚ÇΩ)</b>", reply_markup= case_r_chek)

@callbacks_router.callback_query(F.data == "case_i")
async def get_case_o(callback: CallbackQuery):
    await callback.message.edit_text(text="<b>üíé –≠–ª–∏—Ç–Ω—ã–π (225‚ÇΩ)</b>", reply_markup= case_i_chek)

@callbacks_router.callback_query(F.data == "case_o_open")
async def get_case_o(callback: CallbackQuery):
    await callback.message.delete(text=f'–í–∞—à –¥—Ä–æ–øüîÆ: {random.randint(1,10000)}', reply_markup= case_drop)
    await callback.message.answer(text=f'–í–∞—à –¥—Ä–æ–øüîÆ: {random.randint(1, 10000)}', reply_markup=case_drop)

@callbacks_router.callback_query(F.data == "case_r_open")
async def get_case_o(callback: CallbackQuery):
    await callback.message.delete(text=f'–í–∞—à –¥—Ä–æ–øüîÆ: {random.randint(1, 10000)}', reply_markup=case_drop)
    await callback.message.answer(text=f'–í–∞—à –¥—Ä–æ–øüîÆ: {random.randint(1, 10000)}', reply_markup=case_drop)

@callbacks_router.callback_query(F.data == "case_i_open")
async def get_case_o(callback: CallbackQuery):
    await callback.message.delete(text=f'–í–∞—à –¥—Ä–æ–øüîÆ: {random.randint(1, 10000)}', reply_markup=case_drop)
    await callback.message.answer(text=f'–í–∞—à –¥—Ä–æ–øüîÆ: {random.randint(1, 10000)}', reply_markup=case_drop)



#@callbacks_router.callback_query(F.data == "sell")
#async def get_case_o(callback: CallbackQuery):
 #   await callback.message.answer(text="—Å–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω! —Å—Ä–µ–¥—Å–≤–∞ –∑–∞–Ω–µ—Å–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")

#@callbacks_router.callback_query(F.data == "add")
#async def get_case_o(callback: CallbackQuery):
 #  await callback.message.answer(text="—Å–∫–∏–Ω –∑–∞–Ω–µ—Å–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª—å")




@callbacks_router.callback_query(F.data.in_(["sell","add"]))
async def get_drop(callback: CallbackQuery):
    if callback.data == "sell":
        await callback.message.edit_text(text="—Å–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω! —Å—Ä–µ–¥—Å–≤–∞ –∑–∞–Ω–µ—Å–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
    else:
        await callback.message.edit_text(text="—Å–∫–∏–Ω –∑–∞–Ω–µ—Å–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª—å")
    await callback.answer()


@callbacks_router.callback_query(F.data.in_(["ezmo","noy"]))
async def get_drop(callback: CallbackQuery,state: FSMContext):
    await callback.answer()
    if callback.data == "ezmo":
        await callback.message.edit_text(text="—É—Å–ø–µ—à–Ω–æ")
        data = await state.get_data()
        popoln(callback.from_user.id, int(data['money']))
        return
    else:
        await callback.message.edit_text(text="–æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
#@callbacks_router.callback_query(F.data == "")

