from aiogram.fsm.state import State, StatesGroup
from aiogram import Router,F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import random
from keyboards.inline import buyy, case_battle
from database import popoln

fsm_router = Router()
class Form(StatesGroup):
    plusdenga = State()
    win = State()
    matches = State()
    win_money = State()
    money = State()
    winstreak = State()
    vivod = State()
    perevod = State()

@fsm_router.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí∏")
async def buy(message: Message, state: FSMContext):
    await message.answer("–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    await state.set_state(Form.money)


@fsm_router.message(Form.money)
async def buy(message: Message, state: FSMContext):
    try:
        if int(message.text) > 30:
            await state.update_data(money=message.text)
            data = await state.get_data()
            await message.answer(text=f"–≤—ã –≥–æ—Ç–æ–≤—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {data['money']}.{random.randint(10,99)}‚ÇΩ?",reply_markup=buyy)
            popoln(message.from_user.id, int(message.text))
        else:
            await message.answer(text="–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 30‚ÇΩ")
            await message.answer("–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

    except:
        await message.answer(text="–æ—à–∏–±–∫–∞. –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–∏—Ñ—Ä—É")
        await message.answer("–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")


@fsm_router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üöî")
async def command_start_handler(message: Message) -> None:
    await message.answer(f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 \n'
                         f'–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã? \n'
                         f'@cs2duel_support\n'
                         f'\n'
                         f' –†–µ—à–∞–µ–º –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã')


@fsm_router.message(F.text == "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ üí∞")
async def buy(message: Message, state: FSMContext):
    await message.answer("–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞")
    await state.set_state(Form.vivod)


@fsm_router.message(Form.vivod)
async def buy(message: Message, state: FSMContext):
    try:
        if int(message.text) > 30:
            await state.update_data(money=message.text)
            data = await state.get_data()
            await message.answer(text=f"—É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ {data['money']}‚ÇΩ")
        else:
            await message.answer(text="–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 30‚ÇΩ")
            await message.answer("–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞")
    except:
        await message.answer(text="–æ—à–∏–±–∫–∞. –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–∏—Ñ—Ä—É")
        await message.answer("–Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞")